{"version":3,"file":"static/js/850.caf0657c.chunk.js","mappings":"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","sources":["components/Phonebook/RegisterForm/RegisterForm.jsx","webpack://react-homework-template/./src/components/Phonebook/ContactForm/ContactForm.module.css?f727","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuth } from 'redux/auth/authSlice';\nimport { registerUser } from 'redux/auth/authOperations';\n\nimport css from '../ContactForm/ContactForm.module.css'\nimport { Loader } from '../Loader/Loader';\n\nconst RegisterForm = () => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        \n        switch (name) {\n            case 'userName':\n                setName(value)\n                break;\n            case 'userEmail':\n                setEmail(value)\n                break;\n            case 'userPassword':\n                setPassword(value)\n                break;\n            default:\n                setName('')\n                setEmail('')\n                setPassword('')\n        }\n    }\n\n    const dispatch = useDispatch();\n    const { isLoading } = useSelector(getAuth);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        dispatch(registerUser({ name: name, email: email, password: password }));\n    }\n\n    const nameId = useMemo(()=> nanoid(), []);\n    const emailId = useMemo(()=> nanoid(), []);\n    const passwordId = useMemo(()=> nanoid(), []);\n    \n    return (<form onSubmit={handleSubmit} className={css.formWrapper}>\n        <label className={css.label} htmlFor={nameId}>Name</label>\n        <input\n            id={nameId}\n            type=\"text\"\n            name=\"userName\"\n            value={name}\n            onChange={handleChange}\n            required\n            placeholder='User_Name'\n            className={css.input} />\n        <label className={css.label} htmlFor={emailId}>Email</label>\n        <input\n            id={emailId}\n            type=\"email\"\n            name=\"userEmail\"\n            value={email}\n            onChange={handleChange}\n            required\n            placeholder='your_email@mail.com'\n            className={css.input} />\n        <label className={css.label} htmlFor={passwordId}>Password</label>\n        <input\n            id={passwordId}\n            type=\"password\"\n            name=\"userPassword\"\n            value={password}\n            onChange={handleChange}\n            required\n            placeholder='min 7 symbols'\n            className={css.input} />\n        {!isLoading ? <button type='submit' className={css.button}>Sign Up</button> : <Loader />}\n    </form>)\n}\n\nexport default RegisterForm","// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"ContactForm_formWrapper__NKdtV\",\"label\":\"ContactForm_label__YXYvo\",\"input\":\"ContactForm_input__dxiTT\",\"button\":\"ContactForm_button__nVfZI\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","handleChange","e","_e$target","target","value","dispatch","useDispatch","isLoading","useSelector","getAuth","nameId","useMemo","nanoid","emailId","passwordId","_jsxs","onSubmit","preventDefault","registerUser","className","css","children","_jsx","htmlFor","id","type","onChange","required","placeholder","Loader","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}