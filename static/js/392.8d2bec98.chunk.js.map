{"version":3,"file":"static/js/392.8d2bec98.chunk.js","mappings":"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","sources":["components/Phonebook/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Phonebook/ContactItem/ContactItem.module.css?fb47","components/Phonebook/ContactItem/ContactItem.jsx","components/Phonebook/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Phonebook/Filter/Filter.module.css?44e1","components/Phonebook/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/Phonebook.jsx","webpack://react-homework-template/./src/components/Phonebook/ContactForm/ContactForm.module.css?f727","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { addContact } from '../../../redux/contacts/contactsOperations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport css from '../ContactForm/ContactForm.module.css'\nimport { Loader } from '../Loader/Loader';\n\nexport const ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        \n        switch (name) {\n            case 'contactName':\n                setName(value)\n                break;\n            case 'contactNumber':\n                setNumber(value)\n                break;\n            default:\n                setName('')\n                setNumber('')\n        }\n    }\n\n    const dispatch = useDispatch();\n    const {items, addingLoader} = useSelector(getContacts);\n\n    const contactAlreadyExists = (name, number) => {\n        return items.find((item) => item.name.toLocaleLowerCase() === name.toLocaleLowerCase());\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (contactAlreadyExists(name, number)) {\n            return toast.error(`${name} is already in Phonebook`)\n        }\n\n        dispatch(addContact({name, number}));\n\n        setName('')\n        setNumber('')\n    }\n\n    const nameId = nanoid();\n    const numberId = nanoid();\n    \n    return (\n        <form onSubmit={handleSubmit} className={css.formWrapper}>\n        <label className={css.label} htmlFor={nameId}>Name</label>\n        <input\n            id={nameId}\n            type=\"text\"\n            name=\"contactName\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zAZа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder='Name'\n            className={css.input} />\n        <label className={css.label} htmlFor={numberId}>Number</label>\n        <input\n            id={numberId}\n            type=\"tel\"\n            name=\"contactNumber\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n                placeholder='Number'\n            className={css.input} />\n        {addingLoader ?\n            <Loader/> :\n            <button type='submit' className={css.button}>Add contact</button>\n        }\n    </form>)\n}","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Pnk5T\",\"contactText\":\"ContactItem_contactText__Unqs0\",\"contactBtn\":\"ContactItem_contactBtn__JQaBo\",\"loader\":\"ContactItem_loader__p4N9I\"};","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from 'react-redux';\nimport { removeContact } from '../../../redux/contacts/contactsOperations'; \nimport css from '../ContactItem/ContactItem.module.css'\n\nexport const ContactItem = ({ data }) => {\n    const dispatch = useDispatch();\n\n    const { id, name, number } = data;\n\n    const onDeleteClick = (e, id) => {\n        if (id === e.target.id) {\n            e.target.textContent = 'Deleting...';\n            e.target.setAttribute('disabled', 'true');\n        }\n        dispatch(removeContact(id))\n    }\n    return (\n            <li className={css.contactItem}>\n                <p className={css.contactText}>{name}: {number}</p>\n                <button type='button' className={css.contactBtn} id={id} onClick={(e) => onDeleteClick(e, id)}>Delete</button>\n            </li>)\n}\n\nContactItem.propTypes = {\n    data: PropTypes.objectOf(PropTypes.string.isRequired,),\n}","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../../redux/contacts/contactsOperations';\nimport { getContacts } from '../../../redux/contacts/contactsSlice';\nimport { getFilter } from '../../../redux/filter/filterSlice';\nimport { ContactItem } from '../ContactItem/ContactItem';\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n\n    const {items, error, isLoading} = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n\n    const getFilteredContacts = () => {\n        if (!filter) {\n            return items;\n        }\n        return items.filter(({name}) => name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()))\n    }\n\n    const contactsToRender = getFilteredContacts()\n\n    return <ul style={{ paddingLeft: \"0px\" }}>\n        \n        {isLoading ? <div>Loading...</div> : \n        contactsToRender.map(item =>\n            <ContactItem key={item.id} data={item} />)}\n        {error && <div>Something went wrong, please, try again</div>}\n    </ul>\n}","// extracted by mini-css-extract-plugin\nexport default {\"filterWrapper\":\"Filter_filterWrapper__-LBgt\",\"label\":\"Filter_label__hOULN\",\"input\":\"Filter_input__8EywS\"};","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport css from '../Filter/Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../../redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(state => state.filter);\n  \n  const handleChange = (e) => {\n    dispatch(setFilter(e.target.value));\n  }\n  \n  const filterId = nanoid();\n\n  return (<div className={css.filterWrapper}>\n    <label htmlFor={filterId} className={css.label}>Find contacts by name</label>\n    <input\n      id={filterId}\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={handleChange}\n      className={css.input}\n      placeholder='Find name' />\n  </div>);\n};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Phonebook_title__ipARL\"};","import { ContactForm } from './ContactForm/ContactForm';\nimport { ContactList } from './ContactList/ContactList';\nimport { Filter } from './Filter/Filter';\nimport css from './Phonebook.module.css'\n\nconst Phonebook = () => {\n    return <>\n        <h1 className={css.title}>Phonebook</h1>\n        <ContactForm />\n\n        <h2 className={css.title}>Contacts</h2>\n        <Filter />\n        <ContactList />\n    </>\n}\n\nexport default Phonebook","// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"ContactForm_formWrapper__NKdtV\",\"label\":\"ContactForm_label__YXYvo\",\"input\":\"ContactForm_input__dxiTT\",\"button\":\"ContactForm_button__nVfZI\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["ContactForm","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","handleChange","e","_e$target","target","value","dispatch","useDispatch","_useSelector","useSelector","getContacts","items","addingLoader","nameId","nanoid","numberId","_jsxs","onSubmit","preventDefault","find","item","toLocaleLowerCase","contactAlreadyExists","toast","concat","addContact","className","css","children","_jsx","htmlFor","id","type","onChange","pattern","title","required","placeholder","Loader","ContactItem","_ref","data","onClick","textContent","setAttribute","removeContact","onDeleteClick","ContactList","useEffect","fetchContacts","error","isLoading","filter","getFilter","contactsToRender","includes","style","paddingLeft","map","Filter","state","filterId","setFilter","_Fragment","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}